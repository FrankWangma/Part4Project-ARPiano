using System.Collections.Generic;
using UnityEngine;
using generator;
using symbol;
using util;
using xmlParser;
using overlay;

namespace control
{
    public class DynamicControl : MonoBehaviour
    {
        private CommonParams _commonParams = CommonParams.GetInstance();
        private GameObject parentObject;

        public GameObject _canvasScore;
        public GameObject _loadScore;

        

        // Called when the object is disabled 
        private void OnDisable()
        {
            // Destroys all of the children objects (all of the symbols generated by the score)
            // This allows for a new score to be generated without any overlap
            foreach (Transform child in parentObject.transform)
            {
                GameObject.Destroy(child.gameObject);
            }
        }

        // Called when the object is enabled 
        private void OnEnable()
        {
            string scoreName = _commonParams.GetScoreName();
            parentObject = GameObject.Find("Test_Canvas");
            DrawScore(scoreName);
        }

        private void DrawScore(string filename)
        {
            XmlFacade xmlFacade = new XmlFacade(filename);
            ScoreGenerator scoreGenerator =
                new ScoreGenerator(xmlFacade.GetBeat().GetBeats(), xmlFacade.GetBeat().GetBeatType());
            List<List<Measure>> scoreList = scoreGenerator.Generate(xmlFacade.GetMeasureList(), Screen.width - 67);
            List<float> screenSize = new List<float>();
            screenSize.Add(Screen.width);
            screenSize.Add(Screen.height);

            OverlayScoreView scoreView = new OverlayScoreView(scoreList, parentObject, screenSize, _canvasScore, _loadScore);
        }
    }
}